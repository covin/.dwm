/* See LICENSE file for copyright and license details. */

/* appearance */
static const char font[]            = "-*-tamsynmod-medium-r-*-*-15-*-*-*-*-*-*-*"
                                      ","
                                      "-*-fixed-medium-r-*-*-14-*-*-*-*-*-*-*";
static const char normbordercolor[] = "#444444";
static const char normbgcolor[]     = "#222222";
static const char normfgcolor[]     = "#bbbbbb";
static const char selbordercolor[]  = "#005577";
static const char selbgcolor[]      = "#005577";
static const char selfgcolor[]      = "#eeeeee";
static const unsigned int borderpx  = 1;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const Bool showbar           = True;     /* False means no bar */
static const Bool topbar            = True;     /* False means bottom bar */
static const unsigned int bottomgap = 16;

/* tagging */
<% tags = {
  home: "\u00B9",
  mail: "\u00CC",
  feed: "\u00AE",
  chat: "\u00A9",
  play: "\u00BA",
  note: "\u00EA",
  code: "\u00E1",
  test: "\u00E0",
  work: "\u00D7",
} %>
static const char *tags[] = {<%= tags.values.map(&:inspect).join(',') %>};

static const Rule rules[] = {
	/* class,        instance,   title,            tags mask,                           isfloating,  monitor */
	{ "XWrits",      NULL,       NULL,             ~0,                                  True,        -1 },
	{ NULL,          "DIALOG",   NULL,             0,                                   True,        -1 },
	{ NULL/*xev*/,   NULL,       "Event Tester",   0,                                   True,        -1 },
	{ "XFontSel",    NULL,       NULL,             0,                                   True,        -1 },
	{ "Xmessage",    NULL,       NULL,             0,                                   True,        -1 },
	{ "Xmag",        NULL,       NULL,             0,                                   True,        -1 },
	{ "Display",     NULL,       NULL,             0,                                   True,        -1 },
	{ "Gimp",        NULL,       NULL,             0,                                   True,        -1 },
	{ "MPlayer",     NULL,       NULL,             0,                                   True,        -1 },
	{ "trayer",      NULL,       NULL,             1,                                   True,        -1 },
	{ "Claws-mail",  NULL,       NULL,             1 << <%= tags.keys.index :mail %>,   False,       -1 },
	{ "Liferea",     NULL,       NULL,             1 << <%= tags.keys.index :feed %>,   False,       -1 },
	{ "Zim",         NULL,       NULL,             1 << <%= tags.keys.index :note %>,   False,       -1 },
	{ "Skype",       NULL,       NULL,             1 << <%= tags.keys.index :chat %>,   False,       -1 },
	{ "Pidgin",      NULL,       NULL,             1 << <%= tags.keys.index :chat %>,   False,       -1 },
	{ "rdesktop",    NULL,       NULL,             1 << <%= tags.keys.index :work %>,   False,       -1 },
	{ "Vncviewer",   NULL,       NULL,             1 << <%= tags.keys.index :work %>,   False,       -1 },
};

/* layout(s) */
static const float mfact      = 0.50; /* factor of master area size [0.05..0.95] */
static const int nmaster      = 1;    /* number of clients in master area */
static const Bool resizehints = False; /* True means respect size hints in tiled resizals */

#include "grid.c"
#include "fibonacci.c"
#include "bstack.c"
#include "bstackhoriz.c"
/* first entry is default */
/* no layout function means floating behavior */
<% layouts = {
  tile:        "\u00FE", # "[]=",
  nil =>       "\u00FD", # "><>",
  monocle:     "\u00FF", # "[M]",
  grid:        "\u00FA", # "HHH",
  dwindle:     "\u00F9", # "[\\]",
  spiral:      "\u00F8", # "(@)",
  bstack:      "\u00F5", # "TTT",
  bstackhoriz: "\u00FB", # "===",
} %>
static const Layout layouts[] = {<%= layouts.map {|func, icon| "{#{icon.inspect}, #{func || :NULL}}" }.join(',') %>};

/* key definitions */
#define MODKEY Mod1Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static const char *dmenucmd[] = { "dmenu_run", "-hist", <%= File.expand_path('~/.dwm_history').inspect %>, "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char *termcmd[] = { "urxvt", NULL };
static const char *browser_cmd[] = { "chromium", NULL };
static const char *filer_cmd[] = { "thunar", NULL };
static const char *editor_cmd[] = { "gvim", NULL };

#include "movestack.c"
#include "shiftview.c"
static Key keys[] = {
	/* modifier,                     key,               function,        argument */
	{ MODKEY,                        XK_e,              spawn,           {.v = dmenucmd } },
	{ MODKEY,                        XK_x,              spawn,           {.v = termcmd } },
	{ MODKEY,                        XK_k,              spawn,           {.v = browser_cmd } },
	{ MODKEY,                        XK_j,              spawn,           {.v = filer_cmd } },
	{ MODKEY,                        XK_q,              spawn,           {.v = editor_cmd } },
	{ MODKEY|ShiftMask,              XK_m,              togglebar,       {0} },
	{ MODKEY,                        XK_n,              focusstack,      {.i = +1 } },
	{ MODKEY,                        XK_t,              focusstack,      {.i = -1 } },
	{ MODKEY|ControlMask,            XK_n,              movestack,       {.i = +1 } },
	{ MODKEY|ControlMask,            XK_t,              movestack,       {.i = -1 } },
	{ MODKEY,                        XK_i,              incnmaster,      {.i = +1 } },
	{ MODKEY,                        XK_u,              incnmaster,      {.i = -1 } },
	{ MODKEY|ControlMask,            XK_h,              setmfact,        {.f = -0.05} },
	{ MODKEY|ControlMask,            XK_s,              setmfact,        {.f = +0.05} },
	{ MODKEY,                        XK_Return,         zoom,            {0} },
	{ MODKEY,                        XK_o,              view,            {0} },
	{ MODKEY,                        XK_z,              setlayout,       {.v = &layouts[<%= layouts.keys.index nil %>]} },
	{ MODKEY,                        XK_g,              setlayout,       {.v = &layouts[<%= layouts.keys.index :grid %>]} },
	{ MODKEY,                        XK_c,              setlayout,       {.v = &layouts[<%= layouts.keys.index :spiral %>]} },
	{ MODKEY,                        XK_r,              setlayout,       {.v = &layouts[<%= layouts.keys.index :dwindle %>]} },
	{ MODKEY,                        XK_l,              setlayout,       {.v = &layouts[<%= layouts.keys.index :tile %>]} },
	{ MODKEY,                        XK_m,              setlayout,       {.v = &layouts[<%= layouts.keys.index :monocle %>]} },
	{ MODKEY,                        XK_w,              setlayout,       {.v = &layouts[<%= layouts.keys.index :bstack %>]} },
	{ MODKEY,                        XK_v,              setlayout,       {.v = &layouts[<%= layouts.keys.index :bstackhoriz %>]} },
	{ MODKEY,                        XK_space,          setlayout,       {0} },
	{ MODKEY|ShiftMask,              XK_space,          togglefloating,  {0} },
	{ MODKEY,                        XK_0,              view,            {.ui = ~0 } },
	{ MODKEY|ControlMask,            XK_0,              view,            {.ui = 0 } },
	{ MODKEY|ShiftMask,              XK_0,              tag,             {.ui = ~0 } },
	{ MODKEY|ControlMask|ShiftMask,  XK_0,              tag,             {.ui = 0 } },/*TODO*/
	{ MODKEY|ShiftMask,              XK_Delete,         killclient,      {0} },
	{ MODKEY,                        XK_bracketleft,    focusmon,        {.i = -1 } },
	{ MODKEY,                        XK_bracketright,   focusmon,        {.i = +1 } },
	{ MODKEY|ShiftMask,              XK_bracketleft,    tagmon,          {.i = -1 } },
	{ MODKEY|ShiftMask,              XK_bracketright,   tagmon,          {.i = +1 } },
	{ MODKEY,                        XK_comma,          shiftview,       {.i = -1 } },
	{ MODKEY,                        XK_period,         shiftview,       {.i = +1 } },
	TAGKEYS(XK_1,                    0)
	TAGKEYS(XK_2,                    1)
	TAGKEYS(XK_3,                    2)
	TAGKEYS(XK_4,                    3)
	TAGKEYS(XK_5,                    4)
	TAGKEYS(XK_6,                    5)
	TAGKEYS(XK_7,                    6)
	TAGKEYS(XK_8,                    7)
	TAGKEYS(XK_9,                    8)
	{ MODKEY|ControlMask,            XK_BackSpace,      quit,            {0} },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click,         event mask,   button,    function,        argument */
	{ ClkLtSymbol,    0,            Button1,   setlayout,       {0} },
	{ ClkLtSymbol,    0,            Button3,   setlayout,       {.v = &layouts[<%= layouts.keys.index nil %>]} },
	{ ClkWinTitle,    0,            Button2,   zoom,            {0} },
	{ ClkStatusText,  0,            Button2,   spawn,           {.v = termcmd } },
	{ ClkClientWin,   MODKEY,       Button1,   movemouse,       {0} },
	{ ClkClientWin,   MODKEY,       Button2,   togglefloating,  {0} },
	{ ClkClientWin,   MODKEY,       Button3,   resizemouse,     {0} },
	{ ClkTagBar,      0,            Button1,   view,            {0} },
	{ ClkTagBar,      0,            Button3,   toggleview,      {0} },
	{ ClkTagBar,      MODKEY,       Button1,   tag,             {0} },
	{ ClkTagBar,      MODKEY,       Button3,   toggletag,       {0} },
};

/* vim: set ft=c: */
