/* See LICENSE file for copyright and license details. */

/* appearance */
static const char font[]            = "-*-tamsynmod-medium-r-*-*-15-*-*-*-*-*-*-*"
                                      ","
                                      "-*-fixed-medium-r-*-*-14-*-*-*-*-*-*-*";
static const char normbordercolor[] = "#444444";
static const char normbgcolor[]     = "#222222";
static const char normfgcolor[]     = "#bbbbbb";
static const char selbordercolor[]  = "#005577";
static const char selbgcolor[]      = "#005577";
static const char selfgcolor[]      = "#eeeeee";
static const unsigned int borderpx  = 1;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const Bool showbar           = True;     /* False means no bar */
static const Bool topbar            = True;     /* False means bottom bar */
static const unsigned int bottomgap = 16;

/* tagging */
<% tags = {
    # XXX  alternatively, define value as hash type {lbl => ?, k => ?}
    home:   ['XK_1'],
    code:   ['XK_2', 'XK_c'],
    mail:   ['XK_3', 'XK_m'],
    net:    ['XK_4', 'XK_n'],
    sys:    ['XK_5', 'XK_s'],
    remote: ['XK_6', 'XK_r'],
    vbox:   ['XK_7', 'XK_v'],
    note:   ['XK_8'],
    chat:   ['XK_9', 'XK_t']
} %>
static const char *tags[] = {<%= tags.keys.map{ |t| "\"" + t.to_s + "\""}.join(',') %>};

static const Rule rules[] = {
	/* class,        instance,   title,            tags mask,                           isfloating,  monitor */
	{ "XWrits",      NULL,       NULL,             ~0,                                  True,        -1 },
	{ NULL,          "DIALOG",   NULL,             0,                                   True,        -1 },
	{ NULL/*xev*/,   NULL,       "Event Tester",   0,                                   True,        -1 },
	{ "XFontSel",    NULL,       NULL,             0,                                   True,        -1 },
	{ "Xmessage",    NULL,       NULL,             0,                                   True,        -1 },
	{ "Display",     NULL,       NULL,             0,                                   True,        -1 },
	{ "Gimp",        NULL,       NULL,             0,                                   True,        -1 },
	{ "MPlayer",     NULL,       NULL,             0,                                   True,        -1 },
	{ "trayer",      NULL,       NULL,             1,                                   True,        -1 },
	{ "Thunderbird", NULL,       NULL,             1 << <%= tags.keys.index :mail %>,   False,       -1 },
	{ "Firefox",     NULL,       NULL,             1 << <%= tags.keys.index :net %>,    False,       -1 },
	{ "Zim",         NULL,       NULL,             1 << <%= tags.keys.index :note %>,   False,       -1 },
	{ "Pidgin",      NULL,       NULL,             1 << <%= tags.keys.index :chat %>,   True,        -1 },
	{ "rdesktop",    NULL,       NULL,             1 << <%= tags.keys.index :remote %>, False,       -1 },
	{ "VirtualBox",  NULL,       NULL,             1 << <%= tags.keys.index :vbox %>,   False,       -1 },
};

/* layout(s) */
static const float mfact      = 0.50;  /* factor of master area size [0.05..0.95] */
static const int nmaster      = 1;     /* number of clients in master area */
static const Bool resizehints = False; /* True means respect size hints in tiled resizals */

#include "grid.c"
#include "fibonacci.c"
#include "bstack.c"
#include "bstackhoriz.c"
/* first entry is default */
/* no layout function means floating behavior */
<% layouts = {
  tile:        "[]=",  # "\u00FE",
  nil =>       "><>",  # "\u00FD",
  monocle:     "[M]",  # "\u00FF",
  grid:        "HHH",  # "\u00FA",
  dwindle:     "[\\]", # "\u00F9",
  spiral:      "(@)",  # "\u00F8",
  bstack:      "TTT",  # "\u00F5",
  bstackhoriz: "===",  # "\u00FB",
} %>
static const Layout layouts[] = {<%= layouts.map {|func, icon| "{#{icon.inspect}, #{func || :NULL}}" }.join(',') %>};

/* key definitions */
#define MODKEY Mod4Mask
#define MODALT Mod1Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|MODALT,                KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
        { MODKEY|MODALT|ShiftMask,      KEY,      toggletag,      {.ui = 1 << TAG} },
// TODO { MODKEY|ControlMask            KEY,      tagfollow,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static const char *dmenucmd[] = { "dmenu_run", "-hist", <%= File.expand_path('~/.dwm_history').inspect %>, "-fn", font, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
static const char *termcmd[] = { "urxvtc", NULL };
// static const char *browser_cmd[] = { "chromium", NULL };
// static const char *filer_cmd[] = { "thunar", NULL };
static const char *editor_cmd[] = { "gvim", NULL };

#include "movestack.c"
#include "shiftview.c"
static Key keys[] = {
	/* modifier,                     key,               function,        argument */
	{ MODKEY,                        XK_p,              spawn,           {.v = dmenucmd } },
	{ MODKEY,                        XK_x,              spawn,           {.v = termcmd } },
	{ MODKEY,                        XK_e,              spawn,           {.v = editor_cmd } },
	{ MODKEY,                        XK_b,              togglebar,       {0} },
        /* move (over) clients with vim keybinding feeling. In some cases its
         * more intiuitve to move 'up' and 'down' */
	{ MODKEY,                        XK_l,              focusstack,      {.i = +1 } },
	{ MODKEY,                        XK_h,              focusstack,      {.i = -1 } },
	{ MODKEY,                        XK_j,              focusstack,      {.i = +1 } },
	{ MODKEY,                        XK_k,              focusstack,      {.i = -1 } },
	{ MODKEY|ShiftMask,              XK_l,              movestack,       {.i = +1 } },
	{ MODKEY|ShiftMask,              XK_j,              movestack,       {.i = +1 } },
	{ MODKEY|ShiftMask,              XK_h,              movestack,       {.i = -1 } },
	{ MODKEY|ShiftMask,              XK_k,              movestack,       {.i = -1 } },
	{ MODKEY|ShiftMask,              XK_space,          togglefloating,  {0} },
	{ MODKEY|ShiftMask,              XK_Delete,         killclient,      {0} },

	{ MODKEY,                        XK_Return,         zoom,            {0} },
        /* modify number of clients in master container area and its size
         * not supported by all layouts */
	{ MODKEY|ShiftMask,              XK_i,              incnmaster,      {.i = +1 } },
	{ MODKEY|ShiftMask,              XK_d,              incnmaster,      {.i = -1 } },
	{ MODKEY|MODALT,                 XK_l,              setmfact,        {.f = -0.05} },
	{ MODKEY|MODALT,                 XK_h,              setmfact,        {.f = +0.05} },
        /* iterate over views/tags */
	{ MODKEY,                        XK_comma,          shiftview,       {.i = -1 } },
	{ MODKEY,                        XK_period,         shiftview,       {.i = +1 } },
	{ MODKEY,                        XK_apostrophe,     view,            {0} },
        /* switch layout */
	{ MODALT|ControlMask,            XK_f,              setlayout,       {.v = &layouts[<%= layouts.keys.index nil %>]} },
	{ MODALT|ControlMask,            XK_g,              setlayout,       {.v = &layouts[<%= layouts.keys.index :grid %>]} },
	{ MODALT|ControlMask,            XK_s,              setlayout,       {.v = &layouts[<%= layouts.keys.index :spiral %>]} },
	{ MODALT|ControlMask,            XK_d,              setlayout,       {.v = &layouts[<%= layouts.keys.index :dwindle %>]} },
	{ MODALT|ControlMask,            XK_t,              setlayout,       {.v = &layouts[<%= layouts.keys.index :tile %>]} },
	{ MODALT|ControlMask,            XK_m,              setlayout,       {.v = &layouts[<%= layouts.keys.index :monocle %>]} },
	{ MODALT|ControlMask,            XK_b,              setlayout,       {.v = &layouts[<%= layouts.keys.index :bstack %>]} },
        { MODALT|ControlMask,            XK_h,              setlayout,       {.v = &layouts[<%= layouts.keys.index :bstackhoriz %>]} },
        /* toggle last active layout */
	{ MODALT|ControlMask,            XK_space,          setlayout,       {0} },

	{ MODKEY,                        XK_0,              view,            {.ui = ~0 } },
	{ MODKEY|ControlMask,            XK_0,              view,            {.ui = 0 } },
	{ MODKEY|ShiftMask,              XK_0,              tag,             {.ui = ~0 } },
	{ MODKEY|ControlMask|ShiftMask,  XK_0,              tag,             {.ui = 0 } },/*TODO*/
        /* focus between monitor */
        { MODALT,                        XK_comma,          focusmon,        {.i = -1 } },
        { MODALT,                        XK_period,         focusmon,        {.i = +1 } },
        { MODKEY,                        XK_Tab,            focusmon,        {0} },
        /* move client to next/previous monitor */
        { MODALT|ShiftMask,              XK_comma,          tagmon,          {.i = -1 } },
        { MODALT|ShiftMask,              XK_period,         tagmon,          {.i = +1 } },
        // TODO missing keep focus behaviour
        /* view operations per tag declaration (goto, show, moveto, addto) */
        <% shortcuts = tags.values
           shortcuts.each_index do |index|
               shortcuts[index].each do |k|
        %>TAGKEYS(<%= k %>, <%= index %>)
        <% end
        end %>
	{ MODALT|ControlMask,            XK_BackSpace,      quit,            {0} },
};

/* button definitions */
/* click can be ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static Button buttons[] = {
	/* click,         event mask,   button,    function,        argument */
	{ ClkLtSymbol,    0,            Button1,   setlayout,       {0} },
	{ ClkLtSymbol,    0,            Button3,   setlayout,       {.v = &layouts[<%= layouts.keys.index nil %>]} },
	{ ClkWinTitle,    0,            Button2,   zoom,            {0} },
	{ ClkStatusText,  0,            Button2,   spawn,           {.v = termcmd } },
	{ ClkClientWin,   MODKEY,       Button1,   movemouse,       {0} },
	{ ClkClientWin,   MODKEY,       Button2,   togglefloating,  {0} },
	{ ClkClientWin,   MODKEY,       Button3,   resizemouse,     {0} },
	{ ClkTagBar,      0,            Button1,   view,            {0} },
	{ ClkTagBar,      0,            Button3,   toggleview,      {0} },
	{ ClkTagBar,      MODKEY,       Button1,   tag,             {0} },
	{ ClkTagBar,      MODKEY,       Button3,   toggletag,       {0} },
};

/* vim: set ft=c: */
